!<arch>
0-isupper.c/    0           0     0     644     240       `
#include "main.h"
/**
 * _isupper - checks for uppercase letters
 * @c: char to check
 * Return: 1 if c is upper or 0 otherwise
 */
int _isupper(int c)
{
/* ternary operator used to return 0/1 */
	return ((c >= 'A' && c <= 'Z') ? 1 : 0);
}
0-memset.c/     0           0     0     644     446       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: pointer to the memory to be filled
 * @b: value of memory to be filled
 * @n: number of mem byte to be filled
 * Return: pinter to the address memory block
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;
/* n-- is iterarted through s and records new values of byte in b */
	while (n--)
		*p++ = b;
	return (s); /* poinetr to the starting address */
}
100-atoi.c/     0           0     0     644     417       `

#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to convert.
 * Return: intger.
 */

int _atoi(char *s)
{
	int i = 0;
	int x = 1;
	int y = 0;
	unsigned int j = 0;

	while (s[i])
	{
		if (s[i] == '-')
		{
			x *= -1;
		}
		while (s[i] >= '0' && s[i] <= '9')
		{
			y = 1;
			j = (j * 10) + (s[i] - '0');
			i++;
		}
		if (y == 1)
		{
			break;
		}
		i++;
	}
	j *= x;
	return (j);
}

1-isdigit.c/    0           0     0     644     189       `
#include "main.h"
/**
 * _isdigit - checks if a char is a digit
 * @c: the char to check
 * Return: 1 if it's a digit, 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= 48 && c <= 57);
}

1-memcpy.c/     0           0     0     644     366       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = 0;
	int j = 0;

	while (n > 0)
	{
		dest[i] = src[j];
		i++;
		j++;
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     467       `
#include "main.h"
/**
 * *_strncat - concantenates two strings
 * @src: source string
 * @dest: destiny string
 * @n: maximum number of characters to append
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)

{

	int index = 0, dest_len = 0;

	while (dest[index++])/* loop interates inside dest string until null*/
	dest_len++;
	for (index = 0; src[index] && index < n; index++)/* appended char < n*/
	dest[dest_len++] = src[index];
	return (dest);

}

2-strchr.c/     0           0     0     644     294       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - locates char c in string s
 * @s: string to check
 * @c: character to check
 * Return:  string with c or else NULL
 */

char *_strchr(char *s, char c)
{
	do {
		if (*s == c)
			return (s);
		s++;
		} while (*s != '\n');

	return (NULL);
}
2-strlen.c/     0           0     0     644     240       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: lenth
 */
int _strlen(char *s)
{
/* initialize the length variable to 0 */
	int lenth = 0;

	while (*s != '\0')
		lenth++;
	s++;

	return (lenth);
}
2-strncpy.c/    0           0     0     644     330       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     210       `
#include "main.h"
/**
 * _islower - checks if a char is in lower case
 * @c: string to check
 * Return: 1 if lower  0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);

	return (0);
}
3-puts.c/       0           0     0     644     184       `
#include "main.h"
/**
 * _puts - prints a string
 * @s: string to be printed
 */
void _puts(char *s)
{
	int i;

	for (i = 0; i != '\0'; i++)
	{
		_putchar(s[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     323       `
#include "main.h"
/**
 * _strcmp - prints the comparison between two strings
 * @s1: string one
 * @s2: string two
 * Return: always 0 success
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}

3-strspn.c/     0           0     0     644     527       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: string
 * @accept: contains bytes that may or may not compose parts of the string
 *
 * Return: the number of bytes that compose the length
 */
unsigned int _strspn(char *s, char *accept)
{
	int i;
	int j;
	unsigned int length;

	length = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0' && accept[j] != s[i]; j++)
			;
		if (s[i] == accept[j])
			length++;
		if (accept[j] == '\0')
			return (length);
	}
	return (length);
}

4-isalpha.c/    0           0     0     644     250       `
#include "main.h"
/**
 * _isalpha - checks whether a char is an alphabet
 * @c: character to check
 * Return: 1 if c is a char or 0, otherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	return (0);
}
4-strpbrk.c/    0           0     0     644     452       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - searching a string for any of a set of bytes
 * @s: the string
 * @accept: set of bytes
 *
 * Return: a pointer to the byte in s that matches one of the bytes in accept
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i;
	unsigned int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				return (&s[i]);
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     532       `
#include "main.h"
/**
 * _strstr - a function that locates a substring
 * @haystack: locate a substring
 * @needle: substring to locate
 *
 * Return: pointer to the beginning of the located substring,
 * or NULL, if substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	char *h = haystack;
	char *n = needle;

	while (*h)
	{
		n = needle;
		h = haystack;
		while (*n)
		{
			if (*h == *n)
			{
				n++;
				h++;
			}
			else
				break;
		}
		if (*n == '\0')
			return (haystack);
		haystack++;
	}
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

